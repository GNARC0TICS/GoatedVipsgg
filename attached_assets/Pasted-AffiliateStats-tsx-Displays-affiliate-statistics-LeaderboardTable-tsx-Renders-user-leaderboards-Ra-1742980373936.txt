AffiliateStats.tsx: Displays affiliate statistics
LeaderboardTable.tsx: Renders user leaderboards
RaceTimer.tsx: Timer component for wager races
ErrorBoundary.tsx: Enhanced error boundary for better error handling
Pages
Main Pages (client/src/pages/): Application routes including:
Dashboard.tsx: User dashboard
WagerRaces.tsx: Wager races page
Leaderboard.tsx: Leaderboard display
Challenges.tsx: User challenges
Telegram.tsx: Telegram integration page
profile.tsx: User's personal profile page with edit capabilities
UserProfile.tsx: Public profile view for viewing other users' profiles
Hooks & Utilities
Custom Hooks (client/src/hooks/): React hooks for data fetching and UI state management
use-leaderboard.ts: Data fetching for leaderboards
use-api-with-loading.ts: API integration with loading states
use-user.ts: User authentication state management
Backend (server/)
Middleware (server/middleware/)
Error Handling (server/middleware/error-handler.ts): Enhanced error handling with structured responses
Rate Limiting (server/middleware/rate-limiter.ts): API rate limiting for security and stability
Authentication (server/middleware/auth.ts): User authentication middleware
Telegram Bot (server/telegram/)
Commands (server/telegram/commands/): Bot command implementations

verify.ts: Account verification command
verify-user.ts: Admin verification command
leaderboard.ts: Leaderboard display command
challenge.ts: Challenge creation and management
challenge-entry.ts: Challenge participation commands
stats.ts: User statistics command
help.ts: Help command
Utilities (server/telegram/utils/): Support functions for bot operations

api.ts: API client for external endpoints
auth.ts: Authentication and permissions
config.ts: Bot configuration
state.ts: Bot state management
logger.ts: Logging system
API Routes
Main Routes (server/routes.ts): API endpoints for frontend integration
Authentication (server/auth.ts): User authentication setup
Verification (server/verification-routes.ts): Account verification endpoints
Database (db/)
Connection Management
Enhanced Connection (db/connection.ts): Production-optimized database connection with:
Connection pooling
Health check functionality
Graceful shutdown handling
WebSocket support for production
Schemas
Telegram Schemas (db/schema/telegram.ts):

telegramUsers: Telegram user records
telegramBotState: Bot state persistence
verificationRequests: Account verification requests
challenges: Challenge definitions
challengeEntries: User challenge entries
User Schemas (db/schema/users.ts):

users: Platform user records
User-related data definitions
Production Enhancements
Security
Helmet Integration: Security headers for production environment
Rate Limiting: Tiered rate limiting for API endpoints
Error Handling: Structured error responses with appropriate information hiding in production
Environment Variables: Secure management with .env.example template
Performance
Database Optimization: Connection pooling and WebSocket support for production
Graceful Shutdown: Proper resource cleanup on server shutdown
Health Monitoring: Enhanced health check endpoint with service status
Reliability
Error Boundaries: Improved client-side error handling
API Caching: Session-based caching for API responses
Structured Logging: Better logging for debugging and monitoring
Data Flow
User Flow:

Users interact with the frontend React application
API requests are made to backend endpoints
Authentication is handled through the auth system
Telegram Bot Flow:

Users send commands to the Telegram bot
Commands are processed by the appropriate handler
Database queries validate and update user data
Responses are sent back to the user
Challenge System Flow:

Admins create challenges via Telegram bot
Users submit entries with proof of participation
Admins review and approve entries
Rewards are distributed via bonus codes
Development Guidelines
Frontend uses TypeScript React with Shadcn UI components
Database uses Drizzle ORM with PostgreSQL
Telegram bot uses node-telegram-bot-api
Authentication uses Passport.js
State management combines React Context and React Query
